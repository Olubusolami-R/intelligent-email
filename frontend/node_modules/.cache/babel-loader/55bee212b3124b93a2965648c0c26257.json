{"ast":null,"code":"import _toConsumableArray from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/src/components/QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nvar questionsPerPlay = 5;\n\nvar QuizView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizView, _Component);\n\n  function QuizView(props) {\n    var _this;\n\n    _classCallCheck(this, QuizView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizView).call(this));\n\n    _this.selectCategory = function (_ref) {\n      var type = _ref.type,\n          _ref$id = _ref.id,\n          id = _ref$id === void 0 ? 0 : _ref$id;\n\n      _this.setState({\n        quizCategory: {\n          type: type,\n          id: id\n        }\n      }, _this.getNextQuestion);\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.getNextQuestion = function () {\n      var previousQuestions = _toConsumableArray(_this.state.previousQuestions);\n\n      if (_this.state.currentQuestion.id) {\n        previousQuestions.push(_this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: _this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: function success(result) {\n          _this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n\n          return;\n        },\n        error: function error(_error) {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    _this.submitGuess = function (event) {\n      event.preventDefault();\n\n      var evaluate = _this.evaluateAnswer();\n\n      _this.setState({\n        numCorrect: !evaluate ? _this.state.numCorrect : _this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    _this.restartGame = function () {\n      _this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    _this.evaluateAnswer = function () {\n      var formatGuess = _this.state.guess // eslint-disable-next-line\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').toLowerCase();\n\n      var answerArray = _this.state.currentQuestion.answer.toLowerCase().split(' ');\n\n      return answerArray.every(function (el) {\n        return formatGuess.includes(el);\n      });\n    };\n\n    _this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n    return _this;\n  }\n\n  _createClass(QuizView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      $.ajax({\n        url: \"/categories\",\n        //TODO: update request URL\n        type: 'GET',\n        success: function success(result) {\n          _this2.setState({\n            categories: result.categories\n          });\n\n          return;\n        },\n        error: function error(_error2) {\n          alert('Unable to load categories. Please try your request again');\n          return;\n        }\n      });\n    }\n  }, {\n    key: \"renderPrePlay\",\n    value: function renderPrePlay() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"choose-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Choose Category\"), React.createElement(\"div\", {\n        className: \"category-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"play-category\",\n        onClick: this.selectCategory,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"ALL\"), Object.keys(this.state.categories).map(function (id) {\n        return React.createElement(\"div\", {\n          key: id,\n          value: id,\n          className: \"play-category\",\n          onClick: function onClick() {\n            return _this3.selectCategory({\n              type: _this3.state.categories[id],\n              id: id\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, _this3.state.categories[id]);\n      })));\n    }\n  }, {\n    key: \"renderFinalScore\",\n    value: function renderFinalScore() {\n      return React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"final-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n        className: \"play-again button\",\n        onClick: this.restartGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Play Again?\"));\n    }\n  }, {\n    key: \"renderCorrectAnswer\",\n    value: function renderCorrectAnswer() {\n      var evaluate = this.evaluateAnswer();\n      return React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"quiz-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.state.currentQuestion.question), React.createElement(\"div\", {\n        className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, evaluate ? 'You were correct!' : 'You were incorrect'), React.createElement(\"div\", {\n        className: \"quiz-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n        className: \"next-question button\",\n        onClick: this.getNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, ' ', \"Next Question\", ' '));\n    }\n  }, {\n    key: \"renderPlay\",\n    value: function renderPlay() {\n      return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"quiz-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, this.state.currentQuestion.question), React.createElement(\"form\", {\n        onSubmit: this.submitGuess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"guess\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"submit-guess button\",\n        type: \"submit\",\n        value: \"Submit Answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n    }\n  }]);\n\n  return QuizView;\n}(Component);\n\nexport default QuizView;","map":{"version":3,"sources":["/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","replace","toLowerCase","answerArray","answer","split","every","el","includes","categories","Object","keys","map","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: 'GET',\n      success: (result) => {\n        this.setState({ categories: result.categories });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      },\n    });\n  }\n\n  selectCategory = ({ type, id = 0 }) => {\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion);\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions];\n    if (this.state.currentQuestion.id) {\n      previousQuestions.push(this.state.currentQuestion.id);\n    }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory,\n      }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true,\n        });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    let evaluate = this.evaluateAnswer();\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    });\n  };\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n    });\n  };\n\n  renderPrePlay() {\n    return (\n      <div className='quiz-play-holder'>\n        <div className='choose-header'>Choose Category</div>\n        <div className='category-holder'>\n          <div className='play-category' onClick={this.selectCategory}>\n            ALL\n          </div>\n          {Object.keys(this.state.categories).map((id) => {\n            return (\n              <div\n                key={id}\n                value={id}\n                className='play-category'\n                onClick={() =>\n                  this.selectCategory({ type: this.state.categories[id], id })\n                }\n              >\n                {this.state.categories[id]}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderFinalScore() {\n    return (\n      <div className='quiz-play-holder'>\n        <div className='final-header'>\n          Your Final Score is {this.state.numCorrect}\n        </div>\n        <div className='play-again button' onClick={this.restartGame}>\n          Play Again?\n        </div>\n      </div>\n    );\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess\n      // eslint-disable-next-line\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n    const answerArray = this.state.currentQuestion.answer\n      .toLowerCase()\n      .split(' ');\n    return answerArray.every((el) => formatGuess.includes(el));\n  };\n\n  renderCorrectAnswer() {\n    let evaluate = this.evaluateAnswer();\n    return (\n      <div className='quiz-play-holder'>\n        <div className='quiz-question'>\n          {this.state.currentQuestion.question}\n        </div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>\n          {evaluate ? 'You were correct!' : 'You were incorrect'}\n        </div>\n        <div className='quiz-answer'>{this.state.currentQuestion.answer}</div>\n        <div className='next-question button' onClick={this.getNextQuestion}>\n          {' '}\n          Next Question{' '}\n        </div>\n      </div>\n    );\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay ||\n      this.state.forceEnd ? (\n      this.renderFinalScore()\n    ) : this.state.showAnswer ? (\n      this.renderCorrectAnswer()\n    ) : (\n      <div className='quiz-play-holder'>\n        <div className='quiz-question'>\n          {this.state.currentQuestion.question}\n        </div>\n        <form onSubmit={this.submitGuess}>\n          <input type='text' name='guess' onChange={this.handleChange} />\n          <input\n            className='submit-guess button'\n            type='submit'\n            value='Submit Answer'\n          />\n        </form>\n      </div>\n    );\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}