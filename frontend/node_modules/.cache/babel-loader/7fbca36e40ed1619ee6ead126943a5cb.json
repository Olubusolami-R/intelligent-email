{"ast":null,"code":"import _classCallCheck from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nvar QuestionView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionView, _Component);\n\n  function QuestionView() {\n    var _this;\n\n    _classCallCheck(this, QuestionView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionView).call(this));\n\n    _this.getQuestions = function () {\n      $.ajax({\n        url: \"/questions?page=\".concat(_this.state.page),\n        type: 'GET',\n        success: function success(result) {\n          _this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n\n          return;\n        },\n        error: function error(_error) {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    _this.getByCategory = function (id) {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions\"),\n        type: 'GET',\n        success: function success(result) {\n          _this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n\n          return;\n        },\n        error: function error(_error2) {\n          alert('Unable to load questions. The selected category likely has no questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    _this.submitSearch = function (searchTerm) {\n      $.ajax({\n        url: \"/questions/search_results\",\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: function success(result) {\n          _this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n\n          return;\n        },\n        error: function error(_error3) {\n          alert('Unable to load questions. There might be no matches for your search term. Try type something else.');\n          return;\n        }\n      });\n    };\n\n    _this.questionAction = function (id) {\n      return function (action) {\n        if (action === 'DELETE') {\n          if (window.confirm('are you sure you want to delete the question?')) {\n            $.ajax({\n              url: \"/questions/\".concat(id),\n              type: 'DELETE',\n              success: function success(result) {\n                _this.getQuestions();\n              },\n              error: function error(_error4) {\n                alert('Unable to load questions. Please try your request again');\n                return;\n              }\n            });\n          }\n        }\n      };\n    };\n\n    _this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n    return _this;\n  }\n\n  _createClass(QuestionView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getQuestions();\n    }\n  }, {\n    key: \"selectPage\",\n    value: function selectPage(num) {\n      var _this2 = this;\n\n      this.setState({\n        page: num\n      }, function () {\n        return _this2.getQuestions();\n      });\n    }\n  }, {\n    key: \"createPagination\",\n    value: function createPagination() {\n      var _this3 = this;\n\n      var pageNumbers = [];\n      var maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n      var _loop = function _loop(i) {\n        pageNumbers.push(React.createElement(\"span\", {\n          key: i,\n          className: \"page-num \".concat(i === _this3.state.page ? 'active' : ''),\n          onClick: function onClick() {\n            _this3.selectPage(i);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, i));\n      };\n\n      for (var i = 1; i <= maxPage; i++) {\n        _loop(i);\n      }\n\n      return pageNumbers;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"question-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"categories-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        onClick: function onClick() {\n          _this4.getQuestions();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Categories\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, Object.keys(this.state.categories).map(function (id) {\n        return React.createElement(\"li\", {\n          key: id,\n          onClick: function onClick() {\n            _this4.getByCategory(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, _this4.state.categories[id], React.createElement(\"img\", {\n          className: \"category\",\n          alt: \"\".concat(_this4.state.categories[id].toLowerCase()),\n          src: \"\".concat(_this4.state.categories[id].toLowerCase(), \".svg\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }));\n      })), React.createElement(Search, {\n        submitSearch: this.submitSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"questions-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Questions\"), this.state.questions.map(function (q, ind) {\n        return React.createElement(Question, {\n          key: q.id,\n          question: q.question,\n          answer: q.answer,\n          category: _this4.state.categories[q.category],\n          difficulty: q.difficulty,\n          questionAction: _this4.questionAction(q.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }), React.createElement(\"div\", {\n        className: \"pagination-menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, this.createPagination())));\n    }\n  }]);\n\n  return QuestionView;\n}(Component);\n\nexport default QuestionView;","map":{"version":3,"sources":["/Users/olubusolamisogunle/Documents/GitHub/trivia-app-project/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","i","push","selectPage","Object","keys","map","toLowerCase","q","ind","question","answer","category","difficulty","createPagination"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`,\n      type: 'GET',\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  selectPage(num) {\n    this.setState({ page: num }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {\n            this.selectPage(i);\n          }}\n        >\n          {i}\n        </span>\n      );\n    }\n    return pageNumbers;\n  }\n\n  getByCategory = (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`,\n      type: 'GET',\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. The selected category likely has no questions. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions/search_results`, \n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({ searchTerm: searchTerm }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category,\n        });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. There might be no matches for your search term. Try type something else.');\n        return;\n      },\n    });\n  };\n\n  questionAction = (id) => (action) => {\n    if (action === 'DELETE') {\n      if (window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`,\n          type: 'DELETE',\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again');\n            return;\n          },\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className='question-view'>\n        <div className='categories-list'>\n          <h2\n            onClick={() => {\n              this.getQuestions();\n            }}\n          >\n            Categories\n          </h2>\n          <ul>\n            {Object.keys(this.state.categories).map((id) => (\n              <li\n                key={id}\n                onClick={() => {\n                  this.getByCategory(id);\n                }}\n              >\n                {this.state.categories[id]}\n                <img\n                  className='category'\n                  alt={`${this.state.categories[id].toLowerCase()}`}\n                  src={`${this.state.categories[id].toLowerCase()}.svg`}\n                />\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch} />\n        </div>\n        <div className='questions-list'>\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category]}\n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className='pagination-menu'>{this.createPagination()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}